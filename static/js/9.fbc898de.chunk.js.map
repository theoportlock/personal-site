{"version":3,"sources":["pages/Contact.js"],"names":["validateText","text","test","length","messages","Contact","useState","idx","updateIter","message","updateMessage","char","updateChar","isActive","setIsActive","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newIdx","newChar","slice","title","name","content","className","data-testid","to","style","color","onMouseEnter","onMouseLeave","href","data","map","s","link","icon","label"],"mappings":"8LAUMA,EAAe,SAACC,GAIpB,MADW,mEACDC,KAAKD,IAAyB,IAAhBA,EAAKE,QAGzBC,EAAW,CACf,KACA,QACA,OACA,iDACA,sCACA,YACA,UACA,oBACA,kDACA,iBACA,qBACA,OACA,QACA,gCACA,gCACA,UAqFaC,UAhEC,WACd,IADoB,EAIMC,mBAAS,GAJf,mBAIbC,EAJa,KAIRC,EAJQ,OAKaF,mBAASF,EAASG,IAL/B,mBAKbE,EALa,KAKJC,EALI,OAMOJ,mBAASF,EAASG,GAAKJ,QAN9B,mBAMbQ,EANa,KAMPC,EANO,OAOYN,oBAAS,GAPrB,mBAObO,EAPa,KAOHC,EAPG,KAyBpB,OA3CkB,SAACC,EAAUC,GAC7B,IAAMC,EAAgBC,mBAEtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAEJI,qBAAU,WACR,GAAIH,EAAO,CACT,IAAMK,EAAKC,aAAY,WACrBL,EAAcG,YACbJ,GACH,OAAO,kBAAMO,cAAcF,IAE7B,OAAO,eACN,CAACL,IAYJQ,EAAY,WACV,IAAIC,EAASlB,EACTmB,EAAUf,EACVA,EAXO,IAWQP,EAASG,GAAKJ,SAC/BsB,GAAU,EACVC,EAAU,GAERD,IAAWrB,EAASD,OACtBW,GAAY,IAEZJ,EAAcN,EAASqB,GAAQE,MAAM,EAAGD,IACxClB,EAAWiB,GACXb,EAAWc,EAAU,MAEtBb,EArBW,GAqBQ,MAGpB,eAAC,IAAD,WACE,cAAC,IAAD,CAAQe,MAAM,UAAd,SACE,sBAAMC,KAAK,cAAcC,QAAQ,uEAEnC,0BAASC,UAAU,OAAOV,GAAG,UAA7B,UACE,iCACE,qBAAKU,UAAU,QAAf,SACE,oBAAIC,cAAY,UAAhB,SAA0B,cAAC,IAAD,CAAMC,GAAG,WAAT,2BAG9B,sBAAKF,UAAU,WAAf,UACE,iFACA,qBACEA,UAAU,mBACVG,MAAOlC,EAAaS,GAAW,GAAK,CAAE0B,MAAO,OAC7CC,aAAc,kBAAMtB,GAAY,IAChCuB,aAAc,kBAAO9B,EAAMH,EAASD,QAAWW,GAAY,IAJ7D,SAME,oBAAGwB,KAAMtC,EAAaS,GAAb,iBAAkCA,EAAlC,kBAA4D,GAArE,UACE,+BAAOA,IACP,0DAIN,oBAAIsB,UAAU,QAAd,SACGQ,IAAKC,KAAI,SAACC,GAAD,OACR,6BACE,mBAAGH,KAAMG,EAAEC,KAAX,SACE,cAAC,IAAD,CAAiBC,KAAMF,EAAEE,UAFpBF,EAAEG","file":"static/js/9.fbc898de.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport Main from '../layouts/Main';\n\nimport data from '../data/contact';\n\n// Validates the first half of an email address.\nconst validateText = (text) => {\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\n  // eslint-disable-next-line no-useless-escape\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\n  return re.test(text) || text.length === 0;\n};\n\nconst messages = [\n  'hi',\n  'hello',\n  'hola',\n  'you-can-email-me-at-literally-anything! Really',\n  'well, not anything. But most things',\n  'like-this',\n  'or-this',\n  'but not this :(  ',\n  'you.can.also.email.me.with.specific.topics.like',\n  'just-saying-hi',\n  'please-work-for-us',\n  'help',\n  'admin',\n  'or-I-really-like-your-website',\n  'I\\'ll-stop-distracting-you-now',\n  'thanks',\n];\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay) {\n      const id = setInterval(() => {\n        savedCallback.current();\n      }, delay);\n      return () => clearInterval(id);\n    }\n    return () => {}; // pass linter\n  }, [delay]);\n};\n\nconst Contact = () => {\n  const hold = 50; // ticks to wait after message is complete before rendering next message\n  const delay = 50; // tick length in mS\n\n  const [idx, updateIter] = useState(0); // points to current message\n  const [message, updateMessage] = useState(messages[idx]);\n  const [char, updateChar] = useState(messages[idx].length); // points to current char\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\n\n  useInterval(() => {\n    let newIdx = idx;\n    let newChar = char;\n    if (char - hold >= messages[idx].length) {\n      newIdx += 1;\n      newChar = 0;\n    }\n    if (newIdx === messages.length) {\n      setIsActive(false);\n    } else {\n      updateMessage(messages[newIdx].slice(0, newChar));\n      updateIter(newIdx);\n      updateChar(newChar + 1);\n    }\n  }, isActive ? delay : null);\n\n  return (\n    <Main>\n      <Helmet title=\"Contact\">\n        <meta name=\"description\" content=\"Contact Michael D'Angelo via email @ michael.l.dangelo@gmail.com\" />\n      </Helmet>\n      <article className=\"post\" id=\"contact\">\n        <header>\n          <div className=\"title\">\n            <h2 data-testid=\"heading\"><Link to=\"/contact\">Contact</Link></h2>\n          </div>\n        </header>\n        <div className=\"email-at\">\n          <p>Feel free to get in touch. You can email me at: </p>\n          <div\n            className=\"inline-container\"\n            style={validateText(message) ? {} : { color: 'red' }}\n            onMouseEnter={() => setIsActive(false)}\n            onMouseLeave={() => (idx < messages.length) && setIsActive(true)}\n          >\n            <a href={validateText(message) ? `mailto:${message}@mldangelo.com` : ''}>\n              <span>{message}</span>\n              <span>@mldangelo.com</span>\n            </a>\n          </div>\n        </div>\n        <ul className=\"icons\">\n          {data.map((s) => (\n            <li key={s.label}>\n              <a href={s.link}>\n                <FontAwesomeIcon icon={s.icon} />\n              </a>\n            </li>\n          ))}\n        </ul>\n      </article>\n    </Main>\n  );\n};\n\nexport default Contact;\n"],"sourceRoot":""}